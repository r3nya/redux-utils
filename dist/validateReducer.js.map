{"version":3,"sources":["validateReducer.js"],"names":[],"mappings":";;;;;;qBACc,SAAS;;;;kCACQ,sBAAsB;;;;2BAC7B,eAAe;;;;2BACf,eAAe;;;;qBACzB,OAAO;;;;qBAEN,UAAC,OAAO,EAAa;AAClC,MAAI,WAA0B,GAAG,EAAE,CAAA;AACnC,MAAI,CAAC,yBAAY,OAAO,CAAC,IAAI,mBAAE,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;AACzD,UAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAA;GAClF;AACD,MAAI,QAAkB,GAAG,SAArB,QAAkB,CAAI,MAAM,EAAK;AACnC,uBAAE,aAAa,CAAC,UAAC,KAAK,EAAE,UAAU,EAAK;AACrC,UAAI,yBAAY,KAAK,CAAC,EAAE;AACtB,2BAAE,aAAa,CAAC,UAAC,MAAM,EAAE,IAAI,EAAK;AAChC,cAAI;AACF,4CAAmB,IAAI,CAAC,CAAA;WACzB,CAAC,OAAO,CAAC,EAAE;AACV,kBAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAA;WAC9F;AACD,cAAI,mBAAE,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE;AACjC,kBAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAA;WAClF;AACD,cAAI,IAAI,KAAK,WAAW,EAAE;AACxB,uBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;WACvB;SACF,EAAE,KAAK,CAAC,CAAA;OACV,MAAM,IAAI,yBAAY,KAAK,CAAC,EAAE;AAC7B,gBAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;OAC7B,MAAM;AACL,cAAM,IAAI,KAAK,CAAC,qHAAqH,CAAC,CAAA;OACvI;KACF,EAAE,MAAM,CAAC,CAAA;GACX,CAAA;AACD,UAAQ,CAAC,OAAO,CAAC,CAAA;CAClB","file":"validateReducer.js","sourcesContent":["/* @flow */\nimport _ from './utils'\nimport validateActionType from './validateActionType'\nimport isDomainMap from './isDomainMap'\nimport isActionMap from './isActionMap'\nimport R from 'ramda'\n\nexport default (reducer: Object) => {\n  let actionTypes: Array<string> = []\n  if (!isDomainMap(reducer) && R.values(reducer).length > 0) {\n    throw new Error('Reducer definition object must begin with a domain definition.')\n  }\n  let iterator: Function = (branch) => {\n    R.mapObjIndexed((value, domainName) => {\n      if (isActionMap(value)) {\n        R.mapObjIndexed((action, name) => {\n          try {\n            validateActionType(name)\n          } catch (e) {\n            throw new Error('Reducer definition object action handler names must be valid action names.')\n          }\n          if (R.contains(name, actionTypes)) {\n            throw new Error('Reducer definition object action handler names must be unique.')\n          }\n          if (name !== 'CONSTRUCT') {\n            actionTypes.push(name)\n          }\n        }, value)\n      } else if (isDomainMap(value)) {\n        iterator(branch[domainName])\n      } else {\n        throw new Error('Reducer definition object value object all values must correspond to a function (action map) or an object (domain).')\n      }\n    }, branch)\n  }\n  iterator(reducer)\n}\n"],"sourceRoot":"/source/"}