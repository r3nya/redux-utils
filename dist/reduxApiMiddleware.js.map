{"version":3,"sources":["reduxApiMiddleware.js"],"names":[],"mappings":"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","file":"reduxApiMiddleware.js","sourcesContent":["/* @flow weak */\nimport { normalize, Schema } from 'normalizr';\nimport fetch from 'isomorphic-fetch';\nimport Immutable from 'immutable'\n\nclass ApiError extends Error {\n  status: any;\n  statusText: string;\n  response: Object;\n  constructor(status, statusText, response) {\n    super();\n    this.name = 'ApiError';\n    this.status = status;\n    this.statusText = statusText;\n    this.message = `${status} - ${statusText}`;\n    this.response = response;\n  }\n}\n\nfunction callApi(endpoint, method, headers, body, schema) {\n  const requestOptions = { method, body, headers }\n  return fetch(endpoint, requestOptions)\n    .then((response) => {\n      if (response.ok) {\n        return Promise.resolve(response);\n      } else {\n        return Promise.reject(response);\n      }\n    })\n    .then((response) => {\n      const contentType = response.headers.get('Content-Type');\n      if (contentType && ~contentType.indexOf('json')) {\n        return response.json().then((json) => {\n          if (schema) {\n            return Promise.resolve(normalize(json, schema));\n          } else {\n            return Promise.resolve(json);\n          }\n        });\n      } else {\n        return Promise.resolve();\n      }\n    },\n    (response) => {\n      const contentType = response.headers.get('Content-Type');\n      if (contentType && ~contentType.indexOf('json')) {\n        return response.json().then((json) => {\n          return Promise.reject(new ApiError(response.status, response.statusText, json));\n        });\n      } else {\n        return Promise.reject(new ApiError(response.status, response.statusText, response));\n      }\n    });\n}\n\nexport const CALL_API = 'CALL_API'\n\nexport function apiMiddleware({ getState }) {\n  return (next) => (action) => {\n    if (getState() instanceof Immutable.Map) {\n      if (getState().get('session') !== undefined) {\n        if (getState().get('session').get('token') !== undefined && getState().get('session').get('token') !== null) {\n          var token = getState().get('session').get('token')\n        }\n      }\n    }\n    const callAPI = action[CALL_API];\n    if (typeof callAPI === 'undefined') {\n      return next(action);\n    }\n    let { endpoint } = callAPI;\n    let { method, body, headers, schema, types, bailout } = callAPI;\n    if (token !== undefined && token !== '' && token !== null) {\n      headers = {Authorization: `Bearer ${token}`}    \n    }\n    /*\n    if (typeof endpoint === 'function') {\n      endpoint = endpoint(getState());\n    }\n    if ((typeof bailout === 'boolean' && bailout) ||\n        (typeof bailout === 'function' && bailout(getState()))) {\n      return Promise.resolve('Bailing out');\n    }*/\n    function actionWith(data, payload) {\n      const finalPayload = { ...action.payload, ...payload };\n      const finalAction = { ...action, payload: finalPayload, ...data };\n      delete finalAction[CALL_API];\n      return finalAction;\n    }\n    let [requestType, successType, failureType] = types;\n    next(actionWith({ type: requestType }));\n    return callApi(endpoint, method, headers, body, schema).then(\n      (response) => next(actionWith({ type: successType }, response)),\n      (error) => next(actionWith({\n        type: failureType,\n        payload: error,\n        error: true\n      }))\n    );\n  };\n}"],"sourceRoot":"/source/"}