{"version":3,"sources":["combineReducers.js"],"names":[],"mappings":";;;;;;qBAAc,SAAS;;;;yBAED,WAAW;;;;+BACL,mBAAmB;;;;8BACpB,kBAAkB;;;;AAE7C,IAAI,WAAW,YAAA;IACb,WAAW,YAAA;IACX,QAAQ,YAAA,CAAA;;;;;;AAMV,WAAW,GAAG,UAAC,GAAG,EAAK;AACrB,SAAO,mBAAE,KAAK,CAAC,GAAG,EAAE,mBAAE,aAAa,CAAC,CAAA;CACrC,CAAA;;;;;;AAMD,WAAW,GAAG,UAAC,GAAG,EAAK;AACrB,SAAO,mBAAE,KAAK,CAAC,GAAG,EAAE,mBAAE,UAAU,CAAC,CAAA;CAClC,CAAA;;;;;;;;;;AAUD,QAAQ,GAAG,UAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAK;AACjD,MAAI,SAAS,YAAA,CAAA;;AAEb,MAAI,CAAC,uBAAU,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;AAC1C,UAAM,IAAI,KAAK,qDAAqD,CAAA;GACrE;;AAED,WAAS,GAAG,MAAM,CAAA;;;;AAIlB,qBAAE,OAAO,CAAC,UAAU,EAAE,UAAC,KAAK,EAAE,UAAU,EAAK;;;AAG3C,QAAI,WAAW,CAAC,KAAK,CAAC,EAAE;;;AAGtB,UAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;AACtB,YAAI,MAAM,YAAA,CAAA;;AAEV,cAAM,CAAC,eAAe,GAAG,IAAI,CAAA;;AAE7B,cAAM,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,CAAA;;AAE9D,YAAI,CAAC,uBAAU,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;AAC1C,gBAAM,IAAI,KAAK,8DAA4D,UAAU,kBAAa,MAAM,CAAC,IAAI,oCAA+B,OAAO,MAAM,QAAK,CAAA;SAC/J;;AAED,iBAAS,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAA;OAC9C;KACF,MAAM,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;AAC7B,eAAS,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,uBAAU,GAAG,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAA;KACrH;GACF,CAAC,CAAA;;AAEF,SAAO,SAAS,CAAA;CACjB,CAAA;;;;;;;qBAMc,UAAC,OAAO,EAAK;AAC1B,+BAAgB,OAAO,CAAC,CAAA;;;;;;;AAOxB,SAAO,UAAC,KAAK,EAAE,MAAM,EAAK;AACxB,QAAI,QAAQ,YAAA;QACV,MAAM,YAAA,CAAA;;AAER,QAAI,CAAC,MAAM,EAAE;AACX,YAAM,IAAI,KAAK,6CAA6C,CAAA;KAC7D;;AAED,QAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,MAAM,KAAK,CAAC,EAAE;AAClD,aAAO,CAAC,IAAI,+BAA6B,MAAM,CAAC,IAAI,oIAAiI,CAAA;;AAErL,aAAO,KAAK,CAAA;KACb;;AAED,gCAAe,MAAM,CAAC,CAAA;;;;AAItB,UAAM,GAAG;AACP,qBAAe,EAAE,KAAK;KACvB,CAAA;;AAED,YAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAA;;AAEnD,QAAI,CAAC,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,IAAI,gBAAgB,EAAE;AAC1D,aAAO,CAAC,IAAI,wBAAsB,MAAM,CAAC,IAAI,SAAM,MAAM,CAAC,CAAA;KAC3D;;AAED,WAAO,QAAQ,CAAA;GAChB,CAAA;CACF","file":"combineReducers.js","sourcesContent":["import _ from './utils'\n\nimport Immutable from 'immutable'\nimport validateReducer from './validateReducer'\nimport validateAction from './validateAction'\n\nlet isActionMap,\n  isDomainMap,\n  iterator\n\n/**\n * @param {Object.<string, Object>} map\n * @return {Boolean} If every object property value is a plain object.\n */\nisDomainMap = (map) => {\n  return _.every(map, _.isPlainObject)\n}\n\n/**\n * @param {Object.<string, Function>} map\n * @return {Boolean} If every object property value is a function.\n */\nisActionMap = (map) => {\n  return _.every(map, _.isFunction)\n}\n\n/**\n * @param {Object} domain\n * @param {Object} action\n * @param {String} action.name\n * @param {Object} collection\n * @param {Object} tapper\n * @return {Object}\n */\niterator = (domain, action, collection, tapper) => {\n  let newDomain\n\n  if (!Immutable.Iterable.isIterable(domain)) {\n    throw new Error(`Domain must be an instance of Immutable.Iterable.`)\n  }\n\n  newDomain = domain\n\n  // console.log(`domain`, domain, `action`, action, `definition`, collection)\n\n  _.forEach(collection, (value, domainName) => {\n    // console.log(`value`, value, `domain`, domainName, `isActionMap`, isActionMap(value), `isDomainMap`, isDomainMap(value))\n\n    if (isActionMap(value)) {\n      // console.log(`action.name`, action.name, `value[action.name]`, typeof value[action.name])\n\n      if (value[action.name]) {\n        let result\n\n        tapper.isActionHandled = true\n\n        result = value[action.name](newDomain.get(domainName), action)\n\n        if (!Immutable.Iterable.isIterable(result)) {\n          throw new Error(`Reducer must return an instance of Immutable.Iterable. \"${domainName}\" domain \"${action.name}\" action handler result is \"${typeof result}\".`)\n        }\n\n        newDomain = newDomain.set(domainName, result)\n      }\n    } else if (isDomainMap(value)) {\n      newDomain = newDomain.set(domainName, iterator(newDomain.get(domainName) || Immutable.Map(), action, value, tapper))\n    }\n  })\n\n  return newDomain\n}\n\n/**\n * @param {Object} reducer\n * @return {Function}\n */\nexport default (reducer) => {\n  validateReducer(reducer)\n\n  /**\n   * @param {Immutable.Iterable} state\n   * @param {Object} action\n   * @return {Immutable.Iterable}\n   */\n  return (state, action) => {\n    let newState,\n      tapper\n\n    if (!action) {\n      throw new Error(`Action parameter value must be an object.`)\n    }\n\n    if (action.type && action.type.indexOf(`@@`) === 0) {\n      console.info(`Ignoring private action \"${action.type}\". redux-immutable does not support state inflation. Refer to https://github.com/gajus/canonical-reducer-composition/issues/1.`)\n\n      return state\n    }\n\n    validateAction(action)\n\n    // Tapper is an object that tracks execution of the action.\n    // @todo Make this an opt-in.\n    tapper = {\n      isActionHandled: false\n    }\n\n    newState = iterator(state, action, reducer, tapper)\n\n    if (!tapper.isActionHandled && action.name !== `CONSTRUCT`) {\n      console.warn(`Unhandled action \"${action.name}\".`, action)\n    }\n\n    return newState\n  }\n}\n"],"sourceRoot":"/source/"}